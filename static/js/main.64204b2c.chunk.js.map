{"version":3,"sources":["components/quotes/QuoteForm.module.css","components/layout/MainNavigation.module.css","components/comments/NewCommentForm.module.css","components/quotes/QuoteList.module.css","components/UI/Card.module.css","components/UI/LoadingSpinner.module.css","components/quotes/QuoteItem.module.css","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/layout/Layout.module.css","components/UI/Card.js","components/UI/LoadingSpinner.js","components/quotes/QuoteForm.js","hooks/use-http.js","lib/api.js","pages/AddQuote.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js","components/layout/MainNavigation.js","components/layout/Layout.js","pages/NotFound.js","App.js","index.js"],"names":["module","exports","Card","props","className","classes","card","children","LoadingSpinner","spinner","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","control","htmlFor","type","id","ref","rows","actions","onClick","httpReducer","state","action","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","AddQuote","history","useHistory","useEffect","Fragment","quote","QuoteItem","item","to","QuoteList","quotes","ascending","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","pathname","list","map","NoQuotesFound","noquotes","AllQuotes","loadedQuotes","length","NewCommentForm","commentTextRef","onAddedComment","submitFormHandler","CommentItem","CommentsList","comments","comment","Comments","isAddingComment","setIsAddingComment","useParams","loadedComments","handleAddedComment","HighlightedQuote","QuoteDetail","match","useRouteMatch","params","path","exact","url","MainNavigation","styles","header","logo","nav","activeClassName","active","Layout","main","NotFound","App","setQuotes","console","log","newQuote","prevQuotes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64204b2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__pcWBd\",\"logo\":\"MainNavigation_logo__3mTft\",\"nav\":\"MainNavigation_nav__2KJfX\",\"active\":\"MainNavigation_active__oN3Ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__2Kyqv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__auk_r\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport { Fragment } from \"react/cjs/react.production.min\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const handleFormFocus = () => {\n    //when the user clicked into any form field, we set it true \n    //this is then used to show the Prompt when leaving the page\n    setIsEntering(true);\n  };\n\n  return (\n    <Fragment>\n      {/* to show a prompt warning if a user typed in something into the form and clicks on the back button/leaves the page\n      we can use the Prompt component from react-router-dom */}\n      <Prompt\n        when={isEntering}\n        /* with location we could also show the path */\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost.\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={handleFormFocus}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            {/* to not get the prompt when we actually wanna submit the quote we set it to false */}\n            <button onClick={() => setIsEntering(false)} className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-project-exercise-default-rtdb.europe-west1.firebasedatabase.app/';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${requestData.quoteId}/comments.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}/comments.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","import React /* , {useState} */ from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\nimport { useEffect } from \"react\";\n\nconst AddQuote = (props) => {\n  //the addQuote function is used as request function (sendRequest) within useHttp\n  //that takes the data passed on here (in our case the new quote)\n  //we will get back also a state aka status that contains the status, data and eror value\n  const { sendRequest, status } = useHttp(addQuote);\n  //const [isLoading, setIsLoading] = useState(false)\n  //Programatic navigation: useHistory allows us to move the user to another page when we added a quote\n  const history = useHistory();\n\n  const handleEnterQuote = (quote) => {\n    sendRequest(quote);\n  };\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      //methods to use within useHistory()\n      //push method: we can go back to the previous page with the back button\n      //replace method: it's a redirect and history is removed\n      history.push(\"/quotes\");\n    }\n  }, [status, history]);\n\n  return (\n    <React.Fragment>\n      <QuoteForm isLoading={status===\"pending\"} onAddQuote={handleEnterQuote}></QuoteForm>\n    </React.Fragment>\n  );\n};\n\nexport default AddQuote;\n","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  //get access to a location object that has information about the currently loaded URL/page\n  const location = useLocation();\n\n  //create a new object that can use the search param from the location object in a better way\n  //URLSearchParams() is a built-in constructure function built into the browser\n  //it basically splits up the string of query \"?sort=asc\" into a key value pair of \"sort: asc\"\n  const queryParams = new URLSearchParams(location.search);\n\n  //get a returned true or false when checked whether sort is asc\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const handleChangeSorting = () => {\n    //update the query parameter in the URL depending on how the button is clicked and hence the current query is\n    //use the current pathname instead of hard coding \"quotes\" in order to keep it dynamic\n   /*  history.push(\n      `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    ); */\n\n    //instead of having an awfully long string name as path name within push, we can also push an object\n    //that is split up into pathname and search:\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        {/* when the current sort is ascending then the name of the button should be descending and the other way around */}\n        <button onClick={handleChangeSorting}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst AllQuotes = (props) => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return <QuoteList quotes={loadedQuotes}></QuoteList>;\n};\n\nexport default AllQuotes;\n","import { useRef, useEffect } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData: { text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  //it's better to get the quoteId via params within the Comments component\n  //instead of within the NewCommentForm as the NewCommentForm could technically also be used somewhere else\n  //in this way NewCommentForm stays more flexible and not restricted to the dependency\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  //I want to send a request to fetch my comments whenever this component loaded or changed → useEffect\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  // we need useCallback here cuz it is passed to onAddedComment which is used as a dependency within a useEffect in NewCommentForm component\n  // if we would not use useCallback the onAddedComment function (hence handleAddedComment) would be recreated\n  // whenever the parent component (Comments) rerenders which leads to an infinite loop\n  const handleAddedComment = useCallback(() => {\n    //I want to send another request to fetch the updated comments list once I've added a comment\n    sendRequest(quoteId);\n    //when I added a comment I want the comment section to close again to only see the list of comments\n    setIsAddingComment(false);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  //when we don't have comments yet\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddedComment={handleAddedComment} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\n//useRoutematch is similar to useLocation but has more information about internally managed data\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = (props) => {\n  const match = useRouteMatch();\n  const params = useParams();\n\n  const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\n\n  const {quoteId} = params;\n  //find the right data from right quote item (quote.id) that matches the opened detail page (params.quoteId)\n  // no longer used since we do the mathcing differently through http\n  //const quote = props.quotes.find((quote) => quote.id === params.quoteId);\n\n  useEffect(() => {\n      sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n   if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n \n  if (!loadedQuote.text) {\n    return <p>No quote found.</p>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      {/* in order to hide the \"loaded comments\" once clicked and hence when we're on /comments page */}\n      <Route path={match.path} exact>\n        <div className={\"centered\"}>\n            {/* match.url gives us the exact url and not the relative path with :quoteId */}\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      {/*To make the path a bit more dynamic (in case we change it in our App.js\n        we can use instead of \"/quotes/${params.quoteId}\" just the match.path that gives the current path)  */}\n      <Route path={`${match.path}/comments`} exact>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n","import { NavLink } from \"react-router-dom\";\nimport styles from \"./MainNavigation.module.css\";\n\nconst MainNavigation = () => {\n  return (\n    <header className={styles.header}>\n      <div className={styles.logo}>Great Quotes</div>\n      <nav className={styles.nav}>\n        <ul>\n          <li>\n            <NavLink to=\"/quotes\" activeClassName={styles.active}>\n              All Quotes\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/new-quote\" activeClassName={styles.active}>\n              Add a Quote\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainNavigation;\n","import { Fragment } from \"react/cjs/react.production.min\";\nimport styles from \"./Layout.module.css\";\nimport MainNavigation from \"./MainNavigation\";\n\nconst Layout = (props) => {\n    return (\n        <Fragment>\n            <MainNavigation />\n            {/* Since we use the Layout component as wrapper around the Switch within App, we can just use props.children as content to be inserted */}\n            <main className={styles.main}>{props.children}</main>\n        </Fragment>\n    )\n}\n\nexport default Layout;","const NotFound = () => {\n  return (\n    <div className=\"centered\">\n      <p>Page is not found!</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import { Route, Redirect, Switch } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport AddQuote from \"./pages/AddQuote\";\nimport AllQuotes from \"./pages/AllQuotes\";\nimport QuoteDetail from \"./pages/QuoteDetail\";\nimport Layout from \"./components/layout/Layout\";\nimport NotFound from \"./pages/NotFound\";\n\nfunction App() {\n  const [quotes, setQuotes] = useState([\n    {\n      id: \"q1\",\n      author: \"Sophia\",\n      text: \"this is a quote by sophia\",\n    },\n    {\n      id: \"q2\",\n      author: \"Anna\",\n      text: \"this is a quote by Anna\",\n    },\n  ]);\n\n  const handleAddQuote = (newQuote) => {\n    console.log(\"In app:\" + newQuote);\n    setQuotes((prevQuotes) => {\n      return [newQuote, ...prevQuotes];\n    });\n  };\n\n  console.log(quotes);\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/quotes\" />\n        </Route>\n        <Route path=\"/quotes\" exact>\n          <AllQuotes />\n        </Route>\n        <Route path=\"/quotes/:quoteId\">\n          <QuoteDetail quotes={quotes} />\n        </Route>\n        <Route path=\"/new-quote\">\n          <AddQuote onAddQuote={handleAddQuote} />\n        </Route>\n        {/* To add a catch-all/404/not found page just put the path to the star and at the total end of the Switch */}\n        <Route path=\"*\">\n          <NotFound />\n        </Route>\n      </Switch>\n    </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}